{
  "swagger": "2.0",
  "paths": {
    "/api/workingtimes?userID={user_id}&start={start_date}&end={end_date}": {
      "get": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Get period of a user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          },
          {
            "x-example": "2019-09-11 14:50:12",
            "type": "datetime",
            "required": true,
            "name": "start_date",
            "in": "path",
            "description": "Start Date"
          },
          {
            "x-example": "2019-09-11 14:50:12",
            "type": "datetime",
            "required": true,
            "name": "end_date",
            "in": "path",
            "description": "End Date"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.showForPeriod",
        "description": "Get working time of a user with corresponding id and working period"
      }
    },
    "/api/workingtimes/{workingtime_id}": {
      "put": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Update working time",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "workingtime_id",
            "in": "path",
            "description": "WorkingTime ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.update",
        "description": "Update a working time for a working time with the corresponding id"
      },
      "delete": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Delete a working time",
        "responses": {
          "500": {
            "description": "User not found"
          },
          "204": {
            "description": "No Content - Deleted Successfully"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "workingtime_id",
            "in": "path",
            "description": "WorkingTime ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.delete",
        "description": "Delete a working time with the corresponding id"
      }
    },
    "/api/workingtimes/{user_id}/{workingtime_id}": {
      "get": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Query for working times",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          },
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "workingtime_id",
            "in": "path",
            "description": "WorkingTimes ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.show",
        "description": "Query for working times. This operation display the working times for the corresponding user id and working time id"
      }
    },
    "/api/workingtimes/clock_out/{user_id}": {
      "put": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Create a clock out",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "User already clock out "
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.updateClockOut",
        "description": "Create a clock out and update an existing working time"
      }
    },
    "/api/workingtimes/clock_in/{user_id}": {
      "post": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Create a clock in",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "OK"
          },
          "200": {
            "description": "User already clock in "
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.createClockIn",
        "description": "Create a working time when a user make a clock in"
      }
    },
    "/api/workingtimes": {
      "post": {
        "tags": [
          "Workingtime"
        ],
        "summary": "Create working time",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": "2019-09-11 14:50:12",
            "type": "datetime",
            "required": true,
            "name": "start",
            "in": "query",
            "description": "Start Date"
          },
          {
            "x-example": "2019-09-11 14:50:12",
            "type": "datetime",
            "required": true,
            "name": "end_date",
            "in": "query",
            "description": "End Date"
          },
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "query",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.WorkingtimeController.create",
        "description": "Create a working time for a user give in parameters"
      }
    },
    "/api/users?email={email}&username={username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user",
        "responses": {
          "400": {
            "description": "Error"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": "eric Marc",
            "type": "string",
            "required": false,
            "name": "username",
            "in": "query",
            "description": "Username"
          },
          {
            "x-example": "eric.martin@mail.com",
            "type": "string",
            "required": false,
            "name": "email",
            "in": "query",
            "description": "Email"
          },
          {
            "x-example": "manager",
            "type": "string",
            "required": false,
            "name": "role",
            "in": "query",
            "description": "Role"
          }
        ],
        "operationId": "Project01Web.UserController.index",
        "description": "Query for users. This operation display the user with the corresponding email and/or username"
      }
    },
    "/api/users/{user_id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "responses": {
          "404": {
            "description": "User not foud"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          },
          {
            "x-example": "eric Marc",
            "type": "string",
            "required": false,
            "name": "username",
            "in": "query",
            "description": "Username"
          },
          {
            "x-example": "eric.martin@mail.com",
            "type": "string",
            "required": false,
            "name": "email",
            "in": "query",
            "description": "Email"
          }
        ],
        "operationId": "Project01Web.UserController.update",
        "description": "Update of a user with correspond id"
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query for users",
        "responses": {
          "400": {
            "description": "Error"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.UserController.show",
        "description": "Query for users. This operation display the user with the corresponding id"
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "responses": {
          "500": {
            "description": "User not found"
          },
          "204": {
            "description": "No Content - Deleted Successfully"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.UserController.delete",
        "description": "Delete of a user with corresponding id"
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a user",
        "responses": {
          "422": {
            "description": "Parameter missing"
          },
          "201": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": "eric Marc",
            "type": "string",
            "required": false,
            "name": "username",
            "in": "query",
            "description": "Username"
          },
          {
            "x-example": "eric.martin@mail.com",
            "type": "string",
            "required": false,
            "name": "email",
            "in": "query",
            "description": "Email"
          },
          {
            "x-example": "manager",
            "type": "string",
            "required": false,
            "name": "role",
            "in": "query",
            "description": "Role"
          }
        ],
        "operationId": "Project01Web.UserController.create",
        "description": "Creation of a user with parameters"
      }
    },
    "/api/teams/{team_id}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get a team",
        "responses": {
          "400": {
            "description": "Error"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "team_id",
            "in": "path",
            "description": "Team ID"
          }
        ],
        "operationId": "Project01Web.TeamController.show",
        "description": "Get the team with the corresponding id"
      }
    },
    "/api/teams": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Create a team",
        "responses": {
          "422": {
            "description": "Parameter missing"
          },
          "201": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": "Marketing",
            "type": "string",
            "required": false,
            "name": "username",
            "in": "name",
            "description": "Name"
          }
        ],
        "operationId": "Project01Web.TeamController.create",
        "description": "Creation of a team with a name"
      }
    },
    "/api/manager/viewUsers/{team_id}": {
      "get": {
        "tags": [
          "Link"
        ],
        "summary": "View all users in a team",
        "responses": {
          "400": {
            "description": "Error"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "team_id",
            "in": "path",
            "description": "Team ID"
          }
        ],
        "operationId": "Project01Web.LinkController.viewAllUsersByTeam",
        "description": "View every user in a team with the corresponding id"
      }
    },
    "/api/manager/viewTeams/{user_id}": {
      "get": {
        "tags": [
          "Link"
        ],
        "summary": "View all teams for a user",
        "responses": {
          "400": {
            "description": "Error"
          },
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          }
        ],
        "operationId": "Project01Web.LinkController.viewAllTeamsByUser",
        "description": "View each team for a user with the corresponding id"
      }
    },
    "/api/manager/add/{user_id}/{team_id}": {
      "post": {
        "tags": [
          "Link"
        ],
        "summary": "Add user in a team",
        "responses": {
          "422": {
            "description": "Parameter missing"
          },
          "201": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "user_id",
            "in": "path",
            "description": "User ID"
          },
          {
            "x-example": 2,
            "type": "integer",
            "required": true,
            "name": "team_id",
            "in": "path",
            "description": "Team ID"
          }
        ],
        "operationId": "Project01Web.LinkController.addIntoTeam",
        "description": "Add a new user with the corresping id in a specific team"
      }
    }
  },
  "info": {
    "version": "1.0",
    "title": "Time Manager"
  },
  "host": "localhost:4000",
  "definitions": {}
}